<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shortlog</title><link href="http://www.sudhanshumishra.in/" rel="alternate"></link><link href="http://www.sudhanshumishra.in/feeds/sympy.tag.atom.xml" rel="self"></link><id>http://www.sudhanshumishra.in/</id><updated>2014-08-11T11:27:00+05:30</updated><entry><title>GSoC‘14 progress: Week 12</title><link href="http://www.sudhanshumishra.in/gsoc14-progress-week-12" rel="alternate"></link><updated>2014-08-11T11:27:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-08-11:gsoc14-progress-week-12</id><summary type="html">&lt;p&gt;Last week I worked on utility functions which has been merged into the master.
Currently I am working on converting my incopmlete &lt;span class="caps"&gt;PR&lt;/span&gt; related to geometrical optics in 3D into 2D. Creating these classes in 3D will make it difficult to use/extend. I referred to some books and I never saw use of too much 3D in their illustrations. Depending on the use cases we can consider adding it later after gsoc. As of now optics module can not be called complete and hence I&amp;#8217;ll be working on it post&amp;nbsp;gsoc.&lt;/p&gt;
&lt;p&gt;Few other things which I would like to complete this week are as&amp;nbsp;follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interference&lt;/li&gt;
&lt;li&gt;Diffraction&lt;/li&gt;
&lt;li&gt;IPython notebooks for&amp;nbsp;examples&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gsoc"></category><category term="sympy"></category></entry><entry><title>GSoC‘14 Week 10: Adding more to utils</title><link href="http://www.sudhanshumishra.in/gsoc14-week-10-adding-more-to-utils" rel="alternate"></link><updated>2014-07-28T09:05:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-07-28:gsoc14-week-10-adding-more-to-utils</id><summary type="html">&lt;p&gt;This week I worked on adding more utility function in optics. Some of them are yet to be added. I&amp;#8217;ll send a pull request once I write tests for&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the link to the code pushed till&amp;nbsp;now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/debugger22/sympy/compare/util-funcs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also worked on one of my pending &lt;span class="caps"&gt;PR&lt;/span&gt;(&lt;a href="https://github.com/sympy/sympy/pull/7686"&gt;https://github.com/sympy/sympy/pull/7686&lt;/a&gt;) parameterizing a 3D circle. This will make the implementation a bit&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;Tomorrow I&amp;#8217;ll be going back to&amp;nbsp;college.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s all for now.&amp;nbsp;Cheers!&lt;/p&gt;</summary><category term="gsoc"></category><category term="sympy"></category></entry><entry><title>GSoC‘14 Progress: Finished refraction at planar surface</title><link href="http://www.sudhanshumishra.in/gsoc14-progress-finished-refraction-at-planar-surface" rel="alternate"></link><updated>2014-07-20T14:32:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-07-20:gsoc14-progress-finished-refraction-at-planar-surface</id><summary type="html">&lt;p&gt;I&amp;#8217;m sorry for this delayed post. I couldn&amp;#8217;t work last week due to some other issues so had nothing much to&amp;nbsp;report.&lt;/p&gt;
&lt;p&gt;This week I completed refraction function for planar surface, fixed some bugs and wrote tests for it. I also added a function to calculate angle of deviation. Details can be found on the following&amp;nbsp;link&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7626&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m waiting for Sean to start reviewing&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;My next priority is to complete a pending &lt;span class="caps"&gt;PR&lt;/span&gt; on&amp;nbsp;mirrors.&lt;/p&gt;</summary><category term="gsoc"></category><category term="sympy"></category></entry><entry><title>GSoC‘14 Progress: Working with geometry</title><link href="http://www.sudhanshumishra.in/gsoc14-progress-working-with-geometry" rel="alternate"></link><updated>2014-07-08T17:24:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-07-08:gsoc14-progress-working-with-geometry</id><summary type="html">&lt;p&gt;This week I completed &lt;code&gt;refraction_angle&lt;/code&gt;. Now it also works with &lt;code&gt;Ray3D&lt;/code&gt; and &lt;code&gt;Plane&lt;/code&gt;. This function calculates transmitted vector after refraction. &lt;code&gt;medium1&lt;/code&gt; and &lt;code&gt;medium2&lt;/code&gt; can be &lt;code&gt;Medium&lt;/code&gt;or any sympifiable&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;If&lt;code&gt;incident&lt;/code&gt; is an object of &lt;code&gt;Ray3D&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt; also has to be an instance of &lt;code&gt;Ray3D&lt;/code&gt; in order to get the output as a &lt;code&gt;Ray3D&lt;/code&gt;. If plane of separation is not provided and normal is an instance
of &lt;code&gt;Ray3D&lt;/code&gt;, normal will be assumed to be intersecting incident ray at the plane of separation. This will not be the case when &lt;code&gt;normal&lt;/code&gt; is a &lt;code&gt;Matrix&lt;/code&gt; or
any other&amp;nbsp;sequence.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;incident&lt;/code&gt; is an instance of &lt;code&gt;Ray3D&lt;/code&gt; and &lt;code&gt;plane&lt;/code&gt; has not been provided and &lt;code&gt;normal&lt;/code&gt; is not&lt;code&gt;Ray3D&lt;/code&gt;,
output will be a &lt;code&gt;Matrix&lt;/code&gt;. It is dependent
on &lt;code&gt;Plane&lt;/code&gt; so I haven’t added tests for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Here’s the link to the &lt;span class="caps"&gt;PR&lt;/span&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7626&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week I also worked on making spherical mirrors in SymPy. There are few issues that I am facing.
Currently I’m working(stuck) on locating mirrors in space. It’s an amalgamation of 2D and 3D geometry. I still have to subclass Ray of geometry and make it useful for this. I’ve sent a &lt;a href="https://github.com/sympy/sympy/pull/7686"&gt;&lt;span class="caps"&gt;WIP&lt;/span&gt;
&lt;span class="caps"&gt;PR&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m waiting for Sean to merge &lt;a href="https://github.com/sympy/sympy/pull/7607"&gt;this&lt;/a&gt; long waited &lt;span class="caps"&gt;PR&lt;/span&gt; for moving Gaussian optics&amp;nbsp;module.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s all for&amp;nbsp;now.&lt;/p&gt;</summary><category term="gsoc"></category><category term="physics"></category><category term="sympy"></category></entry><entry><title>GSoC‘14 progress: Week 6</title><link href="http://www.sudhanshumishra.in/gsoc14-progress-week-6" rel="alternate"></link><updated>2014-07-02T03:27:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-07-02:gsoc14-progress-week-6</id><summary type="html">&lt;p&gt;It was a busy week though I managed to do some&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been working on following&amp;nbsp;things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integrating &lt;code&gt;TWave&lt;/code&gt; with &lt;code&gt;refraction_angle&lt;/code&gt;(&lt;a href="https://github.com/sympy/sympy/pull/7626"&gt;7626&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Interference&amp;nbsp;class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some blocking 3D geometry code got merged yesterday which gives me a lot
of new things to work on.&amp;nbsp;:)&lt;/p&gt;
&lt;p&gt;I also tried to take a look on very old &lt;a href="https://github.com/sympy/sympy/pull/1226"&gt;patch&lt;/a&gt; for &lt;code&gt;gaussopt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This week I wrote a script to update the development documentation when
a &lt;span class="caps"&gt;PR&lt;/span&gt; gets merged into the master. This is up and&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;I passed mid term evaluation that took place last week and I would like to
thank &lt;a href="https://github.com/flacjacket"&gt;Sean&lt;/a&gt;, &lt;a href="https://github.com/certik"&gt;Ondrej&lt;/a&gt;,&lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; and &lt;a href="https://github.com/smichr"&gt;Chris&lt;/a&gt; for their constant&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s all for&amp;nbsp;now. Cheers!&lt;/p&gt;</summary><category term="gsoc"></category><category term="physics"></category><category term="sympy"></category></entry><entry><title>GSoC‘14 progress, Week 5</title><link href="http://www.sudhanshumishra.in/gsoc14-progress-week-5" rel="alternate"></link><updated>2014-06-23T17:59:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-06-23:gsoc14-progress-week-5</id><summary type="html">&lt;p&gt;I did good amount of work this week. I sent a small part of it related
to ray tracing for&amp;nbsp;review.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7626&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I got some great suggestions from Sean to make it compatible directly
with&lt;code&gt;TWave&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;It is a &lt;span class="caps"&gt;WIP&lt;/span&gt; as I&amp;#8217;m waiting for few 3D geometry classes. I&amp;#8217;m also working
on inteference of light waves and I hope that I&amp;#8217;ll send it for review in
next couple of days. My last &lt;span class="caps"&gt;PR&lt;/span&gt; on medium is still unmerged and I really
need it to be in master to work on more&amp;nbsp;implementations.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also trying to move &lt;code&gt;physics/gaussopt&lt;/code&gt; to &lt;code&gt;physics/optics/gaussopt&lt;/code&gt; as it&amp;#8217;ll be good to keep things related to optics at the same place. I&amp;#8217;m waiting for opinion of the community about it. Here&amp;#8217;s the link to that
&lt;span class="caps"&gt;PR&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7607&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is some other minor work that I&amp;#8217;ve done this week outside of&amp;nbsp;optics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7609&lt;/li&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7610&lt;/li&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7612&lt;/li&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7614&lt;/li&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7627&lt;/li&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7628&lt;/li&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7629&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for&amp;nbsp;now. Cheers!&lt;/p&gt;</summary><category term="gsoc"></category><category term="physics"></category><category term="sympy"></category></entry><entry><title>GSoC‘14 progress, week 4: finished medium, working on Fermat’s principle and Snell’s law</title><link href="http://www.sudhanshumishra.in/gsoc14-progress-week-4-finished-medium-working-on-fermats-principle-and-snells-law" rel="alternate"></link><updated>2014-06-16T19:32:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-06-16:gsoc14-progress-week-4-finished-medium-working-on-fermats-principle-and-snells-law</id><summary type="html">&lt;p&gt;It was a great week! My last to last &lt;span class="caps"&gt;PR&lt;/span&gt;, on enhancing &lt;code&gt;TWave&lt;/code&gt;, got merged! I have alsofinished&lt;code&gt;Medium&lt;/code&gt; and
waiting for Sean&amp;#8217;s comments on it. Here&amp;#8217;s the link to that &lt;span class="caps"&gt;PR&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7580&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I still have a &lt;em&gt;todo&lt;/em&gt; in the&amp;nbsp;tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;m5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Medium&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;m5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permittivity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;710&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;kg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;simplify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intrinsic_impedance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;6.24845417765552&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;kg&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;# XXX: This is supposed to be zero but it turns out to be&lt;/span&gt;
&lt;span class="c"&gt;# very close to zero and not zero.&lt;/span&gt;
&lt;span class="c"&gt;# assert simplify(m5.speed - 225407863.157895*m/s) == 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;m5.speed&lt;/code&gt; is equal to &lt;code&gt;225407863.157895*m/s&lt;/code&gt; (or maybe very close to it) but, assertion results in a&amp;nbsp;failure.&lt;/p&gt;
&lt;p&gt;Similarly in the constructor of the &lt;code&gt;Medium&lt;/code&gt; inconsistency comes due to slight difference in floating point parameters(permittivity and permeability). I&amp;#8217;ve commented out this part of my code. Maybe Sean
will suggest a better way to do&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# XXX: There&amp;#39;s issue with precision. Values may be&lt;/span&gt;
&lt;span class="c"&gt;# different slightly.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;permittivity&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;u0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;permittivity&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;e0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permittivity&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;permeability&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Values are not consistent.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As soon as it gets merged, I&amp;#8217;ll make necessary changes in Fermat&amp;#8217;s
principle and Snell&amp;#8217;s law part of the code and send a &lt;span class="caps"&gt;PR&lt;/span&gt; to&amp;nbsp;review.&lt;/p&gt;
&lt;p&gt;Now I realize that the next two weeks are not going to be a joy ride for me. I must finish major part of geometrical optics as written in my&amp;nbsp;proposal.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s all for now.&amp;nbsp;Cheers!&lt;/p&gt;</summary><category term="gsoc"></category><category term="physics"></category><category term="sympy"></category></entry><entry><title>GSoC‘14: Third week</title><link href="http://www.sudhanshumishra.in/gsoc14-third-week" rel="alternate"></link><updated>2014-06-10T10:08:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-06-10:gsoc14-third-week</id><summary type="html">&lt;p&gt;It was another not so productive week but I learnt a lot regarding how to write new classes by extending classes like &lt;code&gt;Basic&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt; and &lt;code&gt;Expr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Last week got stuck with the rewrite expression mechanism which turned
out to be a bug in the &lt;code&gt;core&lt;/code&gt;. Thanks to &lt;a href="https://github.com/flacjacket"&gt;Sean&lt;/a&gt; for the fix! I need to
do some more cleanup to get my last &lt;span class="caps"&gt;PR&lt;/span&gt;&amp;nbsp;merged.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7546&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also tried to fix an issue related to assumptions in &lt;code&gt;Function&lt;/code&gt; but the complex behaviour of &lt;code&gt;__new__&lt;/code&gt; constructor makes it difficult to follow the inheritance. I also need to understand the working of SymPy&amp;#8217;s &lt;code&gt;@cacheit&lt;/code&gt; decorator.&lt;/p&gt;
&lt;p&gt;Lately I&amp;#8217;ve been working on the implementation of optical medium. The motivation behind defining
a&lt;code&gt;Medium&lt;/code&gt; came from the laziness of passing constants like electric permittivity and
magnetic permeabhility of the medium everywhere. It will help carry out
operations(events) very easily in&amp;nbsp;optics.&lt;/p&gt;
&lt;p&gt;With the merger of &lt;code&gt;Point3D&lt;/code&gt; by &lt;a href="https://github.com/akshayah3"&gt;Akshay&lt;/a&gt; I planned to implement Fermat&amp;#8217;s principle and thus felt the need of &lt;code&gt;Medium&lt;/code&gt; first.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve already sent a &lt;span class="caps"&gt;WIP&lt;/span&gt; pull request for &lt;code&gt;Medium&lt;/code&gt;. Here&amp;#8217;s the&amp;nbsp;link:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7580&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also took a quick glance at variational calculus to solve the problem
involving Fermat&amp;#8217;s principle. I&amp;#8217;m planning to start this as&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FermatsPrinciple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(()))&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(())):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point3D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point3D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point3D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point3D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Point3D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Point3D&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p1 and p2 can only be tuple, Point or Point3D&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s not a very good &lt;span class="caps"&gt;API&lt;/span&gt; and needs more refining which I&amp;#8217;ll discuss with
Sean once I get it&amp;nbsp;working.&lt;/p&gt;
&lt;p&gt;My work in this week(&lt;em&gt;fourth week as I am writing this post very late&lt;/em&gt;) will be to complete the above discussed&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;On a lighter note, the temperature here is 46 degrees and no sign of rains yet.&amp;nbsp;:(&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s all for now.&amp;nbsp;Cheers!&lt;/p&gt;
&lt;p&gt;If you have some feedback or questions regarding this post, please add comments. I would be happy to get some&amp;nbsp;feedback.&lt;/p&gt;</summary><category term="gsoc"></category><category term="physics"></category><category term="sympy"></category></entry><entry><title>GSoC‘14 Progress: Finishing TWave</title><link href="http://www.sudhanshumishra.in/gsoc14-progress-finishing-twave" rel="alternate"></link><updated>2014-06-02T02:02:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-06-02:gsoc14-progress-finishing-twave</id><summary type="html">&lt;p&gt;This last week most of the coding I did was only related to transverse
wave. It has already been merged into the&amp;nbsp;master.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/pull/7518&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the class structure of the &lt;code&gt;TWave&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Inherits&lt;/span&gt;
&lt;span class="gh"&gt;========&lt;/span&gt;

Expr

&lt;span class="gh"&gt;Arguments&lt;/span&gt;
&lt;span class="gh"&gt;=========&lt;/span&gt;

amplitude : Sympifyable    Amplitude of the wave.
frequency : Sympifyable    Frequency of the wave.
phase : Sympifyable    Phase angle of the wave.
time_period : Sympifyable    Time period of the wave.
n : Sympifyable    Refractive index of the medium.

&lt;span class="gh"&gt;Raises&lt;/span&gt;
&lt;span class="gh"&gt;=======&lt;/span&gt;

ValueError : When niether frequency nor time period is provided or they are not consistent.
TypeError : When anyting other than TWave objects is added.

&lt;span class="gh"&gt;Methods&lt;/span&gt;
&lt;span class="gh"&gt;=======&lt;/span&gt;

frequency
time_period
wavelength
amplitude
phase
speed
angular_velocity
wavenumber
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Till now it has been very easy to implement this but these days I&amp;#8217;m stuck on writing functions to rewrite an expression using different functions. This is supposed to work like this as I feel from the&amp;nbsp;code:&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;expr.rewrite('sin')&lt;/code&gt;, the following code written in &lt;code&gt;sympy.core.basic&lt;/code&gt;should
make a call to function &lt;code&gt;_eval_rewrite_as_sin(self, *args)&lt;/code&gt; defined in the object&amp;nbsp;class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;string_types&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_eval_rewrite_as_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_eval_rewrite_as_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_eval_rewrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_eval_rewrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But this is not the case with me. It always ends up calling &lt;code&gt;__str__&lt;/code&gt; method. This is the &lt;span class="caps"&gt;PR&lt;/span&gt; for the&amp;nbsp;same.&lt;/p&gt;
&lt;p&gt;https://github.com/sympy/sympy/pull/7546&lt;/p&gt;
&lt;p&gt;By the way, I had never used any debugger for Python before and now I feel it makes your life much easier. &lt;a href="http://winpdb.org/"&gt;Winpdb&lt;/a&gt; is a great Python debugger which is platform&amp;nbsp;independent.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also been working on &lt;span class="caps"&gt;SHM&lt;/span&gt; and will submit a &lt;span class="caps"&gt;PR&lt;/span&gt; soon for that. Besides my project, I also closed two issues this week related to printing in &lt;code&gt;sympy.logic&lt;/code&gt; and helped to review few&amp;nbsp;PRs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/sympy/sympy/issues/7179&lt;/li&gt;
&lt;li&gt;https://github.com/sympy/sympy/issues/7180&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PR&lt;/span&gt;: &amp;lt;https://github.com/sympy/sympy/pull/7541&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have a public channel(&lt;a href="https://gitter.im/sympy/sympy/optics"&gt;https://gitter.im/sympy/sympy/optics&lt;/a&gt;) to discuss about my project. You are welcome to join us, we would be more than happy to get feedback about the work. It&amp;#8217;ll help us refine it and
cover a wider range of use&amp;nbsp;cases.&lt;/p&gt;
&lt;h2&gt;Weeklog&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Merged&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add tests for pretty&amp;nbsp;printer&lt;/li&gt;
&lt;li&gt;Remove unnecessary if&amp;nbsp;block&lt;/li&gt;
&lt;li&gt;Add IPython Notebook Checkpoints to&amp;nbsp;.gitignore&lt;/li&gt;
&lt;li&gt;Remove double wrapping with&amp;nbsp;u&lt;/li&gt;
&lt;li&gt;Add tests for printing Equivalent. fixes&amp;nbsp;#7180&lt;/li&gt;
&lt;li&gt;Wrap unicode chars with u and fix a bug in latex&amp;nbsp;printer&lt;/li&gt;
&lt;li&gt;Fix a typo in manipulation.rst [skip&amp;nbsp;ci]&lt;/li&gt;
&lt;li&gt;Make equivalence symbol same for pretty printer and * latex printer and change not equivalent symbol to u+2262 [skip&amp;nbsp;ci]&lt;/li&gt;
&lt;li&gt;Fix latex printing for Not(Equivalent) and&amp;nbsp;Not(Implies).&lt;/li&gt;
&lt;li&gt;Fix pretty printing for Not(Equivalent) and Not(Implies). fixes&amp;nbsp;#7179&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pending&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change arg to *args [skip&amp;nbsp;ci]&lt;/li&gt;
&lt;li&gt;Add rewrite expression methods [skip&amp;nbsp;ci]&lt;/li&gt;
&lt;li&gt;Add wavenumber&amp;nbsp;property&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all for now.&amp;nbsp;Cheers!&lt;/p&gt;</summary><category term="gsoc"></category><category term="physics"></category><category term="sympy"></category></entry><entry><title>GSoC 14: First Week</title><link href="http://www.sudhanshumishra.in/gsoc-14-first-week" rel="alternate"></link><updated>2014-05-25T00:14:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-05-25:gsoc-14-first-week</id><summary type="html">&lt;p&gt;The first week of GSoC is going to end very soon. I started working very
late this week because of some issues. I spent most of my time in
reading books on&amp;nbsp;optics.&lt;/p&gt;
&lt;p&gt;Due to a dependency for 3D geometry, which will take some more time, I
changed my timeline from what I had proposed. Besides starting with
geometrical optics(3 weeks), I have started working on wave&amp;nbsp;optics.&lt;/p&gt;
&lt;p&gt;This is what my proposal&amp;nbsp;says:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During this week I&amp;#8217;ll write code for classical wave equation and simple harmonic&amp;nbsp;motion.&lt;/li&gt;
&lt;li&gt;Introduction of properties like phase angles, phase velocity, wave velocity, amplitude, intensity, frequency and&amp;nbsp;wavelength. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/7518"&gt;This&lt;/a&gt; is my first pull request regarding my project (Thanks to Sean for the quick review). Till now I&amp;#8217;ve only added a transverse wave class and will add more to it in the next 2&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;There were no hiccups&amp;nbsp;yet!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</summary><category term="gsoc"></category><category term="physics"></category><category term="sympy"></category></entry><entry><title>GSoC 2014 with SymPy</title><link href="http://www.sudhanshumishra.in/gsoc-2014-with-sympy" rel="alternate"></link><updated>2014-04-25T18:00:00+05:30</updated><author><name>Sudhanshu Mishra</name></author><id>tag:www.sudhanshumishra.in,2014-04-25:gsoc-2014-with-sympy</id><summary type="html">&lt;p&gt;My proposal is intended to add more to optics in SymPy. Till now it can
only do computations related to Gaussian optics and a bit of geometrical
optics. &lt;a href="https://github.com/certik"&gt;Ondřej Čertík&lt;/a&gt; and &lt;a href="https://github.com/flacjacket"&gt;Sean
Vig&lt;/a&gt; are my mentors for the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;For those who don&amp;#8217;t know what is SymPy, SymPy is a Python library for
symbolic computation. It provides computer algebra capabilities either
as a standalone application, as a library to other applications, or live
on the web as SymPy Live. SymPy is trivial to install and to inspect
because is written entirely in Python and because it does not depend on
any additional libraries. This ease of access combined with a simple and
extensible code base in a well known language make SymPy a computer
algebra system with a relatively low barrier to entry. SymPy is free
software and is licensed under New &lt;span class="caps"&gt;BSD&lt;/span&gt; license. The lead developers are
Ondřej Čertík and Aaron&amp;nbsp;Meurer.&lt;/p&gt;
&lt;p&gt;Three more people other than me got selected for SymPy from my college,
namely, Akshay, Sachin Joglekar and Soumya Dipta&amp;nbsp;Biswas.&lt;/p&gt;
&lt;p&gt;During this &lt;em&gt;Community Bonding Period&lt;/em&gt; I&amp;#8217;ll try to get familiar with the
huge code base of SymPy and its community of developers. I&amp;#8217;m also
working on few old pull requests that are dead for so&amp;nbsp;long.&lt;/p&gt;
&lt;p&gt;Looking forward to work with such a great organization! Thanks to Google
and SymPy for this&amp;nbsp;opportunity!&lt;/p&gt;</summary><category term="gsoc"></category><category term="sympy"></category></entry></feed>