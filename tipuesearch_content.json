{"pages":[{"text":"DRAM comprises a two-dimensional array of DRAM cells, each of which consists of a capacitor and an access-transistor. Depending on whether its capacitor is fully charged or fully discharged, a cell is in either the charged state or the discharged state, respectively. These two states are used to represent a binary data value. Dense packaging in DRAM leads to anomalies while performing continuous read operations from same memory address which involves opening and closing of the wordline. This anomaly will not be evident if the data is read from an address after opening a wordline and not closing it. When there are many activations to the same row, they force the wordline to toggle on and off repeatedly. Such voltage fluctuations on a row's wordline have a disturbance effect on nearby rows, inducing some of their cells to leak charge at an accelerated rate. If such a cell loses too much charge before it is restored to its original value, it experiences a disturbance error.This disturbance results mostly in flipped bit value.Here's the assembly code which may induce errors when executed on Intel/AMD machines. loop: mov X, %eax ; Read from address X and save in register including cache mov Y, %ebx ; values in registers and cache clflush (X) ; Clear data from cache clflush (Y) mfence ; Make sure that data is fully flushed jmp loop On the other hand, the following code will not induce errors because it does not force continuous toggling of the wordline. loop: mov X, %eax ; Read from address X and save in register including cache clflush (X) ; Clear data from cache mfence ; Make sure that data is fully flushed jmp loop These disturbances violate two invariants that memory should provide A read access should not modify data at any address A write access should modify data only at the address being written to This makes systems, using DRAM, vulnerable to data corruption. References: Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, Onur Mutlu et al. Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors, 2014. A. J. van de Goor and I. Schanstra. Address and Data Scrambling: Causes and Impact on Memory Tests. In DELTA, 2002","tags":"Programming","loc":"http://www.sudhanshumishra.in/memory-error-due-to-charge-leak-acceleration-in-dram","title":"Memory Error due to charge leak acceleration in DRAM"},{"text":"Lately I migrated my app from DigitalOcean to AWS and encountered the pain of setting up similar environment.(Documenting everything is very important!) I heard long ago about Docker but never bothered to tinker with it. If you don't know, Docker is a platform for developers and sysadmins to develop, ship, and run applications. Docker lets you quickly assemble applications from components and eliminates the friction that can come when shipping code. It's just like a git pull for your custom OS. https://docker.io manages repositories of docker images, public and private. A docker image is just a set of layers where layers are changes to its file system as results of commands. It uses same commit system like git. Once you've established an image you can run your applications on it. Docker calls them containers. Each container runs a single process. Even when containers run on same environment, they are sandboxed to themselves. There's a 'sophisticated' way in which containers talk to each other. Here's a great article on dockerizing your applications. So yeah, I had to set up the same environment but just for once! Now I can easily automate spawning new instances and adding them under Amazon's ELB. It also made the development easier. I'm amazingly happy with Amazon's great products. Things like Elastic IP, Elastic Load Balancer, Elastic Block Storage, S3, VPC, etc. can be done with just few clicks. Setting up such infrastructure manually is a nightmare. One thing which I miss here is MongoDB. Although there is Amazon's own DynamoDB but I really don't want to learn another NoSQL DB. I'm using few EC2 instances for that. We're accepting beta testers for this app. https://getwaeo.com I'm really excited about it and will be putting it in production in few weeks! Cheers!","tags":"Cloud Computing","loc":"http://www.sudhanshumishra.in/two-things-dockerizing-applications-and-aws-on-the-house-services","title":"Two things: Dockerizing Applications and AWS' on the house services"},{"text":"Hacker News' top 5 entries are some beautiful stories that can't be missed by a technology enthusiast. The problem is HN gives more weight-age to the period of existence of a post and hence articles decay rapidly as time passes. I try my best to read most of them but it's certainly not possible if you've got other things to do. :) To overcome this problem I wrote a small script to pull all those entries and save it for me even when I'm away. Perhaps this will help my obsession with hacker news. Once I have enough articles, I'll host them on the web with real time addition of new articles for everyone. I'll think about other good sources too.","tags":"Miscellaneous","loc":"http://www.sudhanshumishra.in/top-hacker-news-archive","title":"Top Hacker News Archive"},{"text":"Implementation of HTML battery status API is a bit different in webkit. It has not been exposed with navigator.battery . This works fine in Gecko(Firefox) but you might have hard time if you try it on Chrome. After banging my head for few days against some chromium issues I figured out that the API is navigator.getBattery() instead of navigator.battery which returns a promise. It works from Google Chrome v38.0.2125.92 . Here's an example code for this: var battery = navigator . battery || navigator . mozBattery ; if ( battery ) { // This works in Firefox console . log ( battery . level * 100 + '%' ); } else if ( navigator . getBattery ) { // This works in Google Chrome navigator . getBattery (). then ( function ( battery ) { console . log ( battery . level * 100 + '%' ); }); } Once you have the battery, the sub API is same for both. Cheers!","tags":"Programming","loc":"http://www.sudhanshumishra.in/battery-status-api-in-chrome","title":"Battery Status API in Chrome"},{"text":"Last week I worked on utility functions which has been merged into the master. Currently I am working on converting my incopmlete PR related to geometrical optics in 3D into 2D. Creating these classes in 3D will make it difficult to use/extend. I referred to some books and I never saw use of too much 3D in their illustrations. Depending on the use cases we can consider adding it later after gsoc. As of now optics module can not be called complete and hence I'll be working on it post gsoc. Few other things which I would like to complete this week are as follows: Interference Diffraction IPython notebooks for examples","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-progress-week-12","title":"GSoC'14 progress: Week 12"},{"text":"This week I worked on adding more utility function in optics. Some of them are yet to be added. I'll send a pull request once I write tests for them. Here's the link to the code pushed till now: I also worked on one of my pending PR( ) parameterizing a 3D circle. This will make the implementation a bit easier. Tomorrow I'll be going back to college. That's all for now. Cheers!","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-week-10-adding-more-to-utils","title":"GSoC'14 Week 10: Adding more to utils"},{"text":"I'm sorry for this delayed post. I couldn't work last week due to some other issues so had nothing much to report. This week I completed refraction function for planar surface, fixed some bugs and wrote tests for it. I also added a function to calculate angle of deviation. Details can be found on the following link I'm waiting for Sean to start reviewing this. My next priority is to complete a pending PR on mirrors.","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-progress-finished-refraction-at-planar-surface","title":"GSoC'14 Progress: Finished refraction at planar surface"},{"text":"This week I completed `refraction_angle`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}. Now it also works with `Ray3D`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} and `Plane`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}. This function calculates transmitted vector after refraction. `medium1`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} and `medium2`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} can be `Medium`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}or any sympifiable object. If`incident`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} is an object of `Ray3D`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}, `normal`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} also has to be an instance of `Ray3D`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} in order to get the output as a `Ray3D`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}. If plane of separation is not provided and normal is an instance of `Ray3D`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}, normal will be assumed to be intersecting incident ray at the plane of separation. This will not be the case when `normal`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} is a `Matrix`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} or any other sequence. If `incident`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} is an instance of `Ray3D`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} and `plane`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} has not been provided and `normal`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} is not`Ray3D`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}, output will be a `Matrix`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"}. It is dependent on `Plane`{style=\"border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;\"} so I haven't added tests for it. Here's the link to the PR This week I also worked on making spherical mirrors in SymPy. There are few issues that I am facing. Currently I'm working(stuck) on locating mirrors in space. It's an amalgamation of 2D and 3D geometry. I still have to subclass Ray of geometry and make it useful for this. I've sent a [WIP PR](https://github.com/sympy/sympy/pull/7686). I'm waiting for Sean to merge [this](https://github.com/sympy/sympy/pull/7607) long waited PR for moving Gaussian optics module. That's all for now.","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-progress-working-with-geometry","title":"GSoC'14 Progress: Working with geometry"},{"text":"It was a busy week though I managed to do some work. I've been working on following things: Integrating TWave with refraction_angle ( 7626 ) Interference class Some blocking 3D geometry code got merged yesterday which gives me a lot of new things to work on. :-) I also tried to take a look on very old [patch](https://github.com/sympy/sympy/pull/1226) for `gaussopt`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}. This week I wrote a script to update the development documentation when a PR gets merged into the master. This is up and running. I passed mid term evaluation that took place last week and I would like to thank [Sean](https://github.com/flacjacket), [Ondrej](https://github.com/certik),[Aaron](https://github.com/asmeurer) and [Chris](https://github.com/smichr) for their constant support. That's all for now. *Cheers!*","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-progress-week-6","title":"GSoC'14 progress: Week 6"},{"text":"I did good amount of work this week. I sent a small part of it related to ray tracing for review. https://github.com/sympy/sympy/pull/7626 I got some great suggestions from Sean to make it compatible directly with `TWave`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} class. It is a WIP as I'm waiting for few 3D geometry classes. I'm also working on inteference of light waves and I hope that I'll send it for review in next couple of days. My last PR on medium is still unmerged and I really need it to be in master to work on more implementations. I'm also trying to move `physics/gaussopt`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} to `physics/optics/gaussopt`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} as it'll be good to keep things related to optics at the same place. I'm waiting for opinion of the community about it. Here's the link to that PR: https://github.com/sympy/sympy/pull/7607 Here is some other minor work that I've done this week outside of optics: https://github.com/sympy/sympy/pull/7609 https://github.com/sympy/sympy/pull/7610 https://github.com/sympy/sympy/pull/7612 https://github.com/sympy/sympy/pull/7614 https://github.com/sympy/sympy/pull/7627 https://github.com/sympy/sympy/pull/7628 https://github.com/sympy/sympy/pull/7629 That's all for now. *Cheers!*","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-progress-week-5","title":"GSoC'14 progress, Week 5"},{"text":"It was a great week! My last to last PR, on enhancing `TWave`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}, got merged! I have also finished`Medium`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} and waiting for Sean's comments on it. Here's the link to that PR: I still have a *todo* in the tests: m5 = Medium('m5', permittivity=710*10**(-12)*s**4*A**2/(m**3*kg), n=1.33)assert simplify(m5.intrinsic_impedance - 6.24845417765552*kg*m**2/(A**2*s**3)) == 0# XXX: This is supposed to be zero but it turns out to be# very close to zero and not zero.# assert simplify(m5.speed - 225407863.157895*m/s) == 0 This `m5.speed`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} is equal to `225407863.157895*m/s`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} (or maybe very close to it) but, assertion results in a failure. Similarly in the constructor of the `Medium`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} inconsistency comes due to slight difference in floating point parameters(permittivity and permeability). I've commented out this part of my code. Maybe Sean will suggest a better way to do it. # XXX: There's issue with precision. Values may be# different slightly.if permittivity != u0 and permittivity != e0: if n != c*sqrt(permittivity*permeability): raise ValueError(\"Values are not consistent.\") As soon as it gets merged, I'll make necessary changes in Fermat's principle and Snell's law part of the code and send a PR to review. Now I realize that the next two weeks are not going to be a joy ride for me. I must finish major part of geometrical optics as written in my proposal. That's all for now. Cheers!","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-progress-week-4-finished-medium-working-on-fermats-principle-and-snells-law","title":"GSoC'14 progress, week 4: finished medium, working on Fermat's principle and Snell's law"},{"text":"Recently I found a better way to cache data in Android. It can also be used to save preferences of users. I was using SQLite before and it was cumbersome. I had to make a table to save just few key-value pairs. Android SDK comes with an API called android.content.SharedPreferences . A SharedPreferences object points to a file containing key-value pairs and provides simple methods to read and write them. Each SharedPreferences file is managed by the framework and can be private or shared. You'll not lose your data even when the device restarts. It has one more advantage, you can also use to share data among different activities. It supports primitive data types only. You can not save objects in SharedPreferences . Although you can serialize your object and store the raw string in it. To get a private handle of the SharedPreferences use following command: SharedPreferences myPrefs = getActivity (). getSharedPreferences ( getString ( \"YOUR_PREFERENCE_FILE_NAME\" ), Context . MODE_PRIVATE ); Note : YOUR_PREFERENCE_FILE_NAME can be any valid string allowed for a file name in UNIX environment. Private data will be available to your application only, it can not be accessed by other applications installed on the device. To make it public you just need to replace Context.MODE_PRIVATE with either MODE_WORLD_READABLE or MODE_WORLD_WRITABLE SharedPreferences myPrefs = getSharedPreferences ( \"YOUR_PREFERENCE_FILE_NAME\" , Context . MODE_WORLD_WRITABLE ); Publicly shared prefences are available to other apps and if they know the file identifier, they may perform read/write operations on it. Once you've got the handle you can read data using following code: String strData = myPrefs . getString ( \"mStrData\" , DEFAULT_STRING ); boolean boolData = myPrefs . getBoolean ( \"mBoolData\" , DEFAULT_BOOLEAN ); int intData = myPrefs . getInt ( \"mIntData\" , DEFAULT_INTEGER ); Note : If there isn't any data associated with the passed key, it will return the passed default value. For a complete list of methods see this . To save data in the SharedPreferences you need to add one more line: SharedPreferences . Editor editor = myPrefs . edit (); Now you can easily save data in the memory. editor . putBoolean ( \"cacheAvailable\" , true ); editor . putInt ( \"pingCount\" , myPrefs . getInt ( \"pingCount\" )++); editor . putString ( \"mResponse\" , response ); // A web response in my case.editor.commit(); // This is important to commit changes Update: Use editor.apply() for asynchronous call. This API made my life easy. Now I do not need to write queries to do these small things. If you have suggestions, please comment below. I'll be happy to get feedback.","tags":"Android","loc":"http://www.sudhanshumishra.in/easy-caching-in-android","title":"Easy caching in Android"},{"text":"It was another not so productive week but I learnt a lot regarding how to write new classes by extending classes like `Basic`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}, `Symbol`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} and `Expr`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}. Last week I got stuck with the rewrite expression mechanism which turned out to be a bug in the `core`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}. Thanks to [Sean](https://github.com/flacjacket) for the fix! I need to do some more cleanup to get my last PR merged. https://github.com/sympy/sympy/pull/7546 I also tried to fix an issue related to assumptions in `Function`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; line-height: 18px; padding: 3px 4px;\"} but the complex behaviour of `__new__`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; line-height: 18px; padding: 3px 4px;\"} constructor makes it difficult to follow the inheritance. I also need to understand the working of SymPy's `@cacheit`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; line-height: 18px; padding: 3px 4px;\"} decorator. Lately I've been working on the implementation of optical medium. The motivation behind defining a`Medium`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} came from the laziness of passing constants like electric permittivity and magnetic permeabhility of the medium everywhere. It will help carry out operations(events) very easily in optics. With the merger of `Point3D`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} by [Akshay](https://github.com/akshayah3) I planned to implement Fermat's principle and thus felt the need of `Medium`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} first. I've already sent a WIP pull request for `Medium`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}. Here's the link: https://github.com/sympy/sympy/pull/7580 I also took a quick glance at variational calculus to solve the problem involving Fermat's principle. I'm planning to start this as following: class FermatsPrinciple ( Expr ): def __init__ ( self , p1 , p2 , v = Symbol ( 'c' )): if isinstance ( p1 , type (())) and isinstance ( p2 , type (())): if len ( p1 ) == 2 and len ( p2 ) == 2 : self . p1 = Point (* p1 ) self . p2 = Point (* p2 ) elif len ( p1 ) == 3 and len ( p2 ) == 3 : self . p1 = Point3D (* p1 ) self . p2 = Point3D (* p2 ) elif isinstance ( p1 , Point ) and isinstance ( p2 , Point ): self . p1 = Point3D ( p1 . x , p1 . y , 0 ) self . p2 = Point3D ( p2 . x , p2 . y , 0 ) elif isinstance ( p1 , Point3D ) and isinstance ( p2 , Point3D ): self . p1 = p1 self . p2 = p2 else: raise TypeError ( \"p1 and p2 can only be tuple, Point or Point3D\" ) It's not a very good API and needs more refining which I'll discuss with Sean once I get it working. My work in this week(*fourth week as I am writing this post very late*) will be to complete the above discussed things. On a lighter note, the temperature here is 46 degrees and no sign of rains yet. :( *That's all for now. Cheers!* If you have some feedback or questions regarding this post, please add comments. I would be happy to get some feedback.","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-third-week","title":"GSoC'14: Third week"},{"text":"This last week most of the coding I did was only related to transverse wave. It has already been merged into the master. Here is the class structure of the `TWave`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}: Inherits========ExprArguments=========amplitude : Sympifyable Amplitude of the wave.frequency : Sympifyable Frequency of the wave.phase : Sympifyable Phase angle of the wave.time_period : Sympifyable Time period of the wave.n : Sympifyable Refractive index of the medium.Raises=======ValueError : When niether frequency nor time period is provided. or they are not consistent.TypeError : When anyting other than TWave objects is added.Methods=======frequencytime_periodwavelengthamplitudephasespeedangular_velocitywavenumber Till now it has been very easy to implement this but these days I'm stuck on writing functions to rewrite an expression using different functions. This is supposed to work like this as I feel from the code: When you call `expr.rewrite('sin')`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}, the following code written in `sympy.core.basic`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"}should make a call to function `_eval_rewrite_as_sin(self, *args)`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} defined in the object class. if not args : return selfelse : pattern = args [:- 1 ] if isinstance ( args [ - 1 ], string_types ) : rule = '_eval_rewrite_as_' + args [ - 1 ] else : rule = '_eval_rewrite_as_' + args [ - 1 ]. __ name__ if not pattern : return self . _ eval_rewrite ( None , rule , **hints ) else : if iterable ( pattern [ 0 ]) : pattern = pattern [ 0 ] pattern = [ p . __ class__ for p in pattern if self . has ( p ) ] if pattern : return self . _ eval_rewrite ( tuple ( pattern ), rule , **hints ) else : return self But this is not the case with me. It always ends up calling `__str__`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} method. This is the PR for the same. By the way, I had never used any debugger for Python before and now I feel it makes your life much easier. [Winpdb](http://winpdb.org/) is a great Python debugger which is platform independent. I've also been working on SHM and will submit a PR soon for that. Besides my project, I also closed two issues this week related to printing in `sympy.logic`{style=\"background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;\"} and helped to review few PRs. https://github.com/sympy/sympy/issues/7179 https://github.com/sympy/sympy/issues/7180 PR: https://github.com/sympy/sympy/pull/7541 We have a public channel( ) to discuss about my project. You are welcome to join us, we would be more than happy to get feedback about the work. It'll help us refine it and cover a wider range of use cases. Weeklog MERGED Add tests for pretty printer Remove unnecessary if block Add IPython Notebook Checkpoints to .gitignore Remove double wrapping with u Add tests for printing Equivalent. fixes #7180 Wrap unicode chars with u and fix a bug in latex printer Fix a typo in manipulation.rst [skip ci] Make equivalence symbol same for pretty printer and * latex printer and change not equivalent symbol to u+2262 [skip ci] Fix latex printing for Not(Equivalent) and Not(Implies). Fix pretty printing for Not(Equivalent) and Not(Implies). fixes #7179 PENDING Change arg to *args [skip ci] Add rewrite expression methods [skip ci] Add wavenumber property This is all for now. Cheers!","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc14-progress-finishing-twave","title":"GSoC'14 Progress: Finishing TWave"},{"text":"The first week of GSoC is going to end very soon. I started working very late this week because of some issues. I spent most of my time in reading books on optics. Due to a dependency for 3D geometry, which will take some more time, I changed my timeline from what I had proposed. Besides starting with geometrical optics(3 weeks), I have started working on wave optics. This is what my proposal says: During this week I'll write code for classical wave equation and simple harmonic motion. Introduction of properties like phase angles, phase velocity, wave velocity, amplitude, intensity, frequency and wavelength. [This](https://github.com/sympy/sympy/pull/7518) is my first pull request regarding my project (Thanks to Sean for the quick review). Till now I've only added a transverse wave class and will add more to it in the next 2 days. There were no hiccups yet! Cheers!","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc-14-first-week","title":"GSoC 14: First Week"},{"text":"My proposal is intended to add more to optics in SymPy. Till now it can only do computations related to Gaussian optics and a bit of geometrical optics. [Ondřej Čertík](https://github.com/certik) and [Sean Vig](https://github.com/flacjacket) are my mentors for the project. For those who don't know what is SymPy, SymPy is a Python library for symbolic computation. It provides computer algebra capabilities either as a standalone application, as a library to other applications, or live on the web as SymPy Live. SymPy is trivial to install and to inspect because is written entirely in Python and because it does not depend on any additional libraries. This ease of access combined with a simple and extensible code base in a well known language make SymPy a computer algebra system with a relatively low barrier to entry. SymPy is free software and is licensed under New BSD license. The lead developers are Ondřej Čertík and Aaron Meurer. Three more people other than me got selected for SymPy from my college, namely, Akshay, Sachin Joglekar and Soumya Dipta Biswas. During this Community Bonding Period I'll try to get familiar with the huge code base of SymPy and its community of developers. I'm also working on few old pull requests that are dead for so long. Looking forward to work with such a great organization! Thanks to Google and SymPy for this opportunity!","tags":"GSoC","loc":"http://www.sudhanshumishra.in/gsoc-2014-with-sympy","title":"GSoC 2014 with SymPy"},{"text":"tl;dr : This post assumes that you have basic knowledge of git. It's just about managing commits and minimizing their numbers by having only meaningful ones. I've been working on a PR for around thirteen days which aims to fix a bug related to mathematical assumptions for inverse trigonometric functions in sympy. In order to do that I kept on committing changes randomly and number of commits went on increasing. As of now sympy has two types of mathematical assumptions we call it new and old so genuinely there should have been only two commits referring changes to respective types. I had two branches master and arctrigo I followed following steps to separate the changes done in both the assumptions: First pull the changes from the remote to your master and merge it to your feature branch. In my case it was arctrigo . Make sure that you are no your feature branch and not on master . Create a diff with respect to master . git diff master > diff (latter diff is just the filename, it could be anything) Create a new temporary branch of master . git checkout master; git branch -b tmp . Apply the patch. git apply diff . Use git add -p and you'll be prompted change by change as to whether that change should be staged for committal. Say y to all changes involving one part and n to the others. Here git has staged a set of changes for your next commit command. Commit the changes for the first part, for which you said y in the prompts, by git commit -m \"your message for the first part\" . And then do git commit -am \"your message for the other part\" for which you said n in the prompts. Delete your feature branch. In my case it was arctrigo with git branch -D arctrigo . Create the same feature branch from tmp and switch to it. git branch tmp; git checkout tmp . Update your PR with git push -f <your_remote_name> <your_branch_name> . Now navigate to your PR and you'll see two clean commits. I just learned these things from Christopher and decided to write a blog post about it. Cheers!","tags":"GSoC","loc":"http://www.sudhanshumishra.in/managing-commits-and-working-with-git-diff","title":"Managing commits and working with git diff"},{"text":"{#setting-up-tornado-server-on-ubuntu-12-04 style=\"color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 36px; margin: 0px;\"} [![Tornado](http://www.tornadoweb.org/en/stable/_images/tornado.png)](http://www.tornadoweb.org/en/stable/_images/tornado.png) Lately I was looking at Tornado which has been open sourced by Facebook. It was originally developed at FriendFeed. It has a great capability to handle tens of thousands on live connections at a time making it ideal for long polling, WebSockets, and other applications that require a long-lived connection to each user. This server is written in Python which follows a non blocking methodology of coding. Just like Node.js it also works on a similar concept of callbacks. Prerequisites {#setting-up-tornado-server-on-ubuntu-12-04 style=\"color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 36px; margin: 0px;\"} ==================================================== Tornado runs on Python 2.6, 2.7, 3.2, and 3.3. On Python 2, the backports.ssl\\_match\\_hostname package must be installed (This will be installed automatically when using pip or easy\\_install); on Python 3 there are no strict dependencies outside the standard library. Some Tornado features may require one of the following optional libraries: unittest2 is needed to run Tornado's test suite on Python 2.6 (it is unnecessary on more recent versions of Python) concurrent.futures is the recommended thread pool for use with Tornado and enables the use of ThreadedResolver . It is needed only on Python 2; Python 3 includes this package in the standard library. pycurl is used by the optional tornado.curl_httpclient. Libcurl version 7.18.2 or higher is required; version 7.21.1 or higher is recommended. Twisted may be used with the classes in tornado.platform.twisted . pycares is an alternative non-blocking DNS resolver that can be used when threads are not appropriate. Monotime adds support for a monotonic clock, which improves reliability in environments where clock adjustments are frequent. No longer needed in Python 3.3. Tornado works on almost all platforms including unix, BSD, Mac OS X and windows though it is advised to use it only on Unix for production purpose. Installation Tornado is listed in [PyPi](https://pypi.python.org/pypi/tornado) so it can be installed very easily with the following command: sudo pip install tornado For backports it will automatically install [backports.ssl\\_match\\_hostname](https://pypi.python.org/pypi/backports.ssl_match_hostname). You can also install the latest development version from source code using following command: sudo pip install https://github.com/facebook/tornado/zipball/master Running a simple program using tornado Following is a simple hello world program using tornado. import tornado.httpserverimport tornado.ioloopimport tornado.optionsimport tornado.webfrom tornado.options import define , optionsdefine ( \"port\" , default = 8888 , help = \"run on the given port\" , type = int ) class MainHandler ( tornado . web . RequestHandler ): def get ( self ): self . write ( \"Hello, world\" ) def main (): tornado . options . parse_command_line () application = tornado . web . Application ([ ( r\"/\" , MainHandler ), ]) http_server = tornado . httpserver . HTTPServer ( application ) http_server . listen ( options . port ) tornado . ioloop . IOLoop . instance () . start () if __name__ == \"__main__\" : main () The above written program will start the server on port 8888. You can check it out by visiting [http://www.yourdomain.com:8888](http://www.yourdomain.com:8888/). I will write more on tornado in future. I'm planning to use this as computing server for online version of [Binpy](http://www.binpy.org/). Cheers!","tags":"Cloud Computing","loc":"http://www.sudhanshumishra.in/setting-up-tornado-server-on-ubuntu-1204","title":"Setting up Tornado server on Ubuntu 12.04"},{"text":"[![](http://binpy.github.io/images/logo.png)](http://binpy.github.io/images/logo.png) BinPy is almost ready to create things. This post focuses on building a ripple counter using it. Theory A ripple counter is an asynchronous counter where only the first flip-flop is clocked by an external clock. All subsequent flip-flops are clocked by the output of the preceding flip-flop. Asynchronous counters are also called ripple-counters because of the way the clock pulse ripples it way through the flip-flops. The MOD of the ripple counter or asynchronous counter is 2n if n flip-flops are used. For a 4-bit counter, the range of the count is 0000 to 1111 (24-1). A counter may count up or count down or count up and down depending on the input control. The count sequence usually repeats itself. When counting up, the count sequence goes from 0000, 0001, 0010, ... 1110 , 1111 , 0000, 0001, ... etc. When counting down the count sequence goes in the opposite manner: 1111, 1110, ... 0010, 0001, 0000, 1111, 1110, ... etc. Implementation The following code is using BinPy's internal NBitRippleCounter. Following is the output of the above code. Under the hood When we are initializing the counter with specified number of bits, it is actually creating those many T Flip Flops and connecting them in order to get the result. The actual implementation is shown in the following code. Try connecting some wires with code, it's fun! If you have some feedback or questions regarding this post, please add comments. Cheers!","tags":"Programming","loc":"http://www.sudhanshumishra.in/binpy-n-bit-ripple-counter","title":"BinPy: N Bit Ripple Counter"},{"text":"It was very difficult for me to choose the best and easiest framework to use for UI design. After lot of research I decided to stick with **JQueryMobile** since it has an awesome extension called **ThemeRoller**. Working with a framework gives you enough time to work on core things rather than thinking about the responsive design. Cordova is doing pretty well with JQuery without loosing any frame. Here's some of the screen shots of the app [![](http://2.bp.blogspot.com/-Ro8l1hwPdeY/UhPmv_VoK8I/AAAAAAAAAg8/h_G61THSzHo/s320/device-2013-08-21-032238.png)](http://2.bp.blogspot.com/-Ro8l1hwPdeY/UhPmv_VoK8I/AAAAAAAAAg8/h_G61THSzHo/s1600/device-2013-08-21-032238.png) [![](http://3.bp.blogspot.com/-D6s37MvlMpI/UhPnnnEflOI/AAAAAAAAAhE/4tkIOQw1L58/s320/device-2013-08-21-031844.png)](http://3.bp.blogspot.com/-D6s37MvlMpI/UhPnnnEflOI/AAAAAAAAAhE/4tkIOQw1L58/s1600/device-2013-08-21-031844.png) I'm not very good at choosing colors, although Blue and Orange are my all time favorite. Working with Android's push notification system is really a hectic job. First you code for C2DM and then you get to know that it has been deprecated by Google itself discourages the development. Google introduced something new called Google Cloud Messaging(GCM). This works pretty smooth once you have the registration Id of the device. Thanks to geeknam for proving such a fantastic library to handle GCM with Python. I hope that Apple Push Notification Service(APNS) would not be a headache like Android. I'll let you know about further development soon. Enjoy!!","tags":"Android","loc":"http://www.sudhanshumishra.in/capastr-talking-about-design","title":"CapaStr: Talking about design"},{"text":"Lenovo Essential G580 is the laptop which has highest number of conflicts with aLinux OS. The biggest problem is when you install a Linux OS you will lose access to your BIOS setup and that's permanent. I faced this problem and I sent my laptop to service center to repair and they had to change its motherboard to fix this problem. When my laptop returned after repairing I installed Ubuntu 12.10 and lost my BIOS once again! :( Now I am using only Ubuntu 12.10 and not windows and that too without BIOS even if it's under warranty. Now when the Ubuntu is installed, be prepared to face challenges! Ubuntu is supposed to carry each and every driver with it but unfortunately it doesn't have the wired network driver for this laptop. After searching over the internet for hours I finally installed my network driver and uploaded the installer to Google drive for future. I solved one more issue of uncontrollable brightness of the screen by editing grub. Bluetooth automatically gets activated sometimes. There are uncountable number of problems. The only thing which you can do is to prevent yourself from buying this laptop.","tags":"Miscellaneous","loc":"http://www.sudhanshumishra.in/linux-and-lenovo-essential-g580","title":"Linux and Lenovo Essential G580"}]}